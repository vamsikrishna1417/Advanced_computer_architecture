diff -urN -x '*.o' gem5-master/src/mem/cache/replacement_policies/ReplacementPolicies.py /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/ReplacementPolicies.py
--- gem5-master/src/mem/cache/replacement_policies/ReplacementPolicies.py	2019-02-07 13:49:53.000000000 -0700
+++ /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/ReplacementPolicies.py	2019-02-27 15:16:17.329876509 -0700
@@ -79,9 +79,9 @@
     cxx_class = 'BRRIPRP'
     cxx_header = "mem/cache/replacement_policies/brrip_rp.hh"
     max_RRPV = Param.Int(3, "Maximum RRPV possible")
-    hit_priority = Param.Bool(False,
+    hit_priority = Param.Bool(True,
         "Prioritize evicting blocks that havent had a hit recently")
-    btp = Param.Percent(3,
+    btp = Param.Percent(100,
         "Percentage of blocks to be inserted with long RRPV")
 
 class RRIPRP(BRRIPRP):
@@ -91,6 +91,14 @@
     btp = 0
     max_RRPV = 1
 
+class SHIPRP(BaseReplacementPolicy):
+    type = 'SHIPRP'
+    cxx_class = 'SHIPRP'
+    cxx_header = "mem/cache/replacement_policies/ship_rp.hh"
+    max_RRPV = Param.Int(3, "Maximum RRPV possible")
+    hit_priority = Param.Bool(True,
+        "Prioritize evicting blocks that havent had a hit recently")
+
 class TreePLRURP(BaseReplacementPolicy):
     type = 'TreePLRURP'
     cxx_class = 'TreePLRURP'
diff -urN -x '*.o' gem5-master/src/mem/cache/replacement_policies/SConscript /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/SConscript
--- gem5-master/src/mem/cache/replacement_policies/SConscript	2019-02-07 13:49:53.000000000 -0700
+++ /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/SConscript	2019-02-24 01:39:09.922631416 -0700
@@ -34,6 +34,7 @@
 
 Source('bip_rp.cc')
 Source('brrip_rp.cc')
+Source('ship_rp.cc')
 Source('fifo_rp.cc')
 Source('lfu_rp.cc')
 Source('lru_rp.cc')
diff -urN -x '*.o' gem5-master/src/mem/cache/replacement_policies/ship_rp.cc /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/ship_rp.cc
--- gem5-master/src/mem/cache/replacement_policies/ship_rp.cc	1969-12-31 17:00:00.000000000 -0700
+++ /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/ship_rp.cc	2019-02-25 19:24:55.283305069 -0700
@@ -0,0 +1,145 @@
+#include "mem/cache/replacement_policies/ship_rp.hh"
+
+#include <cassert>
+#include <memory>
+
+#include "base/logging.hh" // For fatal_if
+#include "base/random.hh"
+#include "params/SHIPRP.hh"
+
+SHIPRP::SHIPRP(const Params *p)
+    : BaseReplacementPolicy(p),
+      maxRRPV(p->max_RRPV), hitPriority(p->hit_priority)
+{
+    fatal_if(maxRRPV <= 0, "max_RRPV should be greater than zero.\n");
+    /* Resetting the table in the constructor */
+    for(int i = 0; i < ARRAY_SIZE; i++)
+    {
+        SHCT[i] = 0;
+    }
+}
+
+void
+SHIPRP::invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+const
+{
+    std::shared_ptr<SHIPReplData> casted_replacement_data =
+        std::static_pointer_cast<SHIPReplData>(replacement_data);
+
+    // Set RRPV to an invalid distance
+    casted_replacement_data->rrpv = maxRRPV + 1;
+}
+
+void
+SHIPRP::touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+    std::shared_ptr<SHIPReplData> casted_replacement_data =
+        std::static_pointer_cast<SHIPReplData>(replacement_data);
+
+    // Update RRPV if not 0 yet
+    // Every hit in HP mode makes the entry the last to be evicted
+    if (hitPriority)
+    {
+        casted_replacement_data->rrpv = 0;
+        casted_replacement_data->uiOutcomeBit = 1;
+        /* count in the table cannot be more than 7 */
+        if(SHCT[casted_replacement_data->uiSignature] < 7)
+        {
+            SHCT[casted_replacement_data->uiSignature] += 1;
+        }
+    }
+    else
+    {
+        std::cout << "Wrong option !!! Hit priority flag is not enabled";
+    }
+}
+
+void
+SHIPRP::reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+    std::shared_ptr<SHIPReplData> casted_replacement_data =
+        std::static_pointer_cast<SHIPReplData>(replacement_data);
+
+    // Reset RRPV
+    // Replacement data is inserted as
+    // "distant re-reference" otherwise
+    casted_replacement_data->uiOutcomeBit = 0;
+    uint64_t tag_address =  (replacement_data->_tag);
+    /* Using hashing to calculate the signature of 14 bits to have 16KB signatures */
+    /* addr[27:14] XOR addr[41:28] XOR addr[52:42] */
+    uint64_t index = (((tag_address >> 14) & 0x3FFF) ^ ((tag_address >> 28) & 0x3FFF) ^ ((tag_address >> 42)));
+    casted_replacement_data->uiSignature = (uint32_t)index;
+    /* If SHCT[signature] == 0 make the block distant else give long re-reference value */
+    if(SHCT[casted_replacement_data->uiSignature] == 0)
+    {
+        casted_replacement_data->rrpv = maxRRPV;
+    }
+    else
+    {
+        casted_replacement_data->rrpv = maxRRPV-1;
+    }
+}
+
+ReplaceableEntry*
+SHIPRP::getVictim(const ReplacementCandidates& candidates) const
+{
+    // There must be at least one replacement candidate
+    assert(candidates.size() > 0);
+
+    // Use first candidate as dummy victim
+    ReplaceableEntry* victim = candidates[0];
+
+    // Store victim->rrpv in a variable to improve code readability
+    int victim_RRPV = std::static_pointer_cast<SHIPReplData>(
+            victim->replacementData)->rrpv;
+
+    // Visit all candidates to find victim
+    for (const auto& candidate : candidates) {
+        // Get candidate's rrpv
+        int candidate_RRPV = std::static_pointer_cast<SHIPReplData>(
+                candidate->replacementData)->rrpv;
+
+        // Stop searching for victims if an invalid entry is found
+        if (candidate_RRPV == maxRRPV + 1) {
+            return candidate;
+            // Update victim entry if necessary
+        } else if (candidate_RRPV > victim_RRPV) {
+            victim = candidate;
+            victim_RRPV = candidate_RRPV;
+        }
+    }
+
+    // Get difference of victim's RRPV to the highest possible RRPV in
+    // order to update the RRPV of all the other entries accordingly
+    int diff = maxRRPV - victim_RRPV;
+
+    // No need to update RRPV if there is no difference
+    if (diff > 0){
+        // Update RRPV of all candidates
+        for (const auto& candidate : candidates) {
+            std::static_pointer_cast<SHIPReplData>(
+                    candidate->replacementData)->rrpv += diff;
+        }
+    }
+
+    /* If evicted_cache_line outcome not true then decrement the corresponding entry in SHCT table */
+    if(std::static_pointer_cast<SHIPReplData>(victim->replacementData)->uiOutcomeBit != 1
+            && SHCT[std::static_pointer_cast<SHIPReplData>(victim->replacementData)->uiSignature] > 0)
+    {
+        SHCT[std::static_pointer_cast<SHIPReplData>(victim->replacementData)->uiSignature] -= 1;
+    }
+
+    return victim;
+}
+
+std::shared_ptr<ReplacementData>
+SHIPRP::instantiateEntry()
+{
+    return std::shared_ptr<ReplacementData>(new SHIPReplData(maxRRPV));
+}
+
+SHIPRP*
+SHIPRPParams::create()
+{
+    return new SHIPRP(this);
+}
diff -urN -x '*.o' gem5-master/src/mem/cache/replacement_policies/ship_rp.hh /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/ship_rp.hh
--- gem5-master/src/mem/cache/replacement_policies/ship_rp.hh	1969-12-31 17:00:00.000000000 -0700
+++ /home/vamsi/STUDY/CA2/Tools/gem5-master/src/mem/cache/replacement_policies/ship_rp.hh	2019-02-24 21:13:56.394695539 -0700
@@ -0,0 +1,139 @@
+/**
+ * @file
+ * Declaration of a Signature-based Hit Predictor (SHiP) replacement policy.
+ *
+ * The goal of signature-based cache replacement is to predict whether the
+ * insertions by a given signature will receive future cache hits.
+ *
+ * SHiP requires two additional fields to be stored with each cache line:
+ * the signature and a single bit to track the outcome of the cache insertion.
+ *
+ * Signature History Counter Table (SHCT) of saturating counters is used
+ * to learn the re-reference behavior of a signature.
+ *
+ * In this, we implemented SHiP based on SRRIP(Static Re-Reference Interval
+ * Prediction) with Hit Promotion.
+ *
+ */
+#ifndef __MEM_CACHE_REPLACEMENT_POLICIES_SHIP_RP_HH__
+#define __MEM_CACHE_REPLACEMENT_POLICIES_SHIP_RP_HH__
+
+#include "mem/cache/replacement_policies/base.hh"
+
+#define ARRAY_SIZE 16*1024 /* 16KB entries */
+
+struct SHIPRPParams;
+
+class SHIPRP : public BaseReplacementPolicy
+{
+    protected:
+        /** SHIP-specific implementation of replacement data. */
+        struct SHIPReplData : ReplacementData
+    {
+
+        /* categorizing references into different groups by associating a signature
+         * with each cache reference. The goal is that cache references that
+         * have the same signature will have a similar re-reference interval.
+         */
+        uint32_t uiSignature;
+
+        /**
+         * The outcome bit (initially set to zero) is set to one only if the cache
+         * line is re-referenced.
+         */
+        uint32_t uiOutcomeBit;
+
+        /**
+         * Re-Reference Interval Prediction Value.
+         * A value equal to max_RRPV + 1 indicates an invalid entry.
+         */
+        int rrpv;
+
+        /**
+         * Default constructor. Invalidate data.
+         */
+        SHIPReplData(const int max_RRPV) : rrpv(max_RRPV + 1) {}
+    };
+
+        /**
+         * Signature History Counter Table.
+         * A zero SHCT value indicates that lines by that signature will not receive
+         * any cache hits..
+         */
+        mutable int SHCT[ARRAY_SIZE];
+
+
+        /**
+         * Maximum Re-Reference Prediction Value possible. An entry with this
+         * value as the rrpv has the longest possible re-reference interval,
+         * that is, it is likely not to be used in the near future, and is
+         * among the best eviction candidates.
+         * A maxRRPV of 1 implies in a NRU.
+         */
+        const int maxRRPV;
+
+        /**
+         * The hit priority (HP) policy replaces entries that do not receive cache
+         * hits over any cache entry that receives a hit, while the frequency
+         * priority (FP) policy replaces infrequently re-referenced entries.
+         */
+        const bool hitPriority;
+
+    public:
+        /** Convenience typedef. */
+        typedef SHIPRPParams Params;
+
+        /**
+         * Construct and initiliaze this replacement policy.
+         */
+        SHIPRP(const Params *p);
+
+        /**
+         * Destructor.
+         */
+        ~SHIPRP() {}
+
+        /**
+         * Invalidate replacement data to set it as the next probable victim.
+         * Set RRPV as the the most distant re-reference.
+         *
+         * @param replacement_data Replacement data to be invalidated.
+         */
+        void invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+            const override;
+
+        /**
+         * Touch an entry to update its replacement data.
+         *
+         * @param replacement_data Replacement data to be touched.
+         */
+        void touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+            override;
+
+        /**
+         * Reset replacement data. Used when an entry is inserted.
+         * Set RRPV according to the insertion policy used.
+         *
+         * @param replacement_data Replacement data to be reset.
+         */
+        void reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+            override;
+
+        /**
+         * Find replacement victim using rrpv.
+         *
+         * @param cands Replacement candidates, selected by indexing policy.
+         * @return Replacement entry to be replaced.
+         */
+        ReplaceableEntry* getVictim(const ReplacementCandidates& candidates) const
+            override;
+
+        /**
+         * Instantiate a replacement data entry.
+         *
+         * @return A shared pointer to the new replacement data.
+         */
+        std::shared_ptr<ReplacementData> instantiateEntry() override;
+};
+
+#endif // __MEM_CACHE_REPLACEMENT_POLICIES_SHIP_RP_HH__
